#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t teacher_ready;
sem_t student_ready[3];

char* resources[] = {"Pen", "Paper", "Question paper"};

void *student(void *num) {
    int student_num = *(int *)num;
    int resource1, resource2;

    // Assign the required resources based on the student's number
    if (student_num == 0) {
        resource1 = 0; // Pen
        resource2 = 1; // Paper
    } else if (student_num == 1) {
        resource1 = 1; // Paper
        resource2 = 2; // Question paper
    } else {
        resource1 = 2; // Question paper
        resource2 = 0; // Pen
    }

    // Wait for the teacher to provide the first resource
    sem_wait(&student_ready[student_num]);
    printf("Student %d received resource %s\n", student_num, resources[resource1]);

    // Wait for the teacher to provide the second resource
    sem_wait(&student_ready[student_num]);
    printf("Student %d received resource %s\n", student_num, resources[resource2]);

    // Finish the assignment
    printf("Student %d has finished the assignment\n", student_num);

    pthread_exit(NULL);
}

void *teacher() {
    while (1) {
        // Wait for a student to be ready
        sem_wait(&teacher_ready);

        // Provide the next set of resources to the student
        for (int i = 0; i < 3; i++) {
            sem_post(&student_ready[i]);
        }
    }
}

int main() {
    sem_init(&teacher_ready, 0, 0);
    for (int i = 0; i < 3; i++) {
        sem_init(&student_ready[i], 0, 0);
    }

    pthread_t students[3];
    pthread_t teacher_tid;

    int student_nums[3] = { 0, 1, 2, };

    for (int i = 0; i < 3; i++) {
        pthread_create(&students[i], NULL, student, &student_nums[i]);
    }

    pthread_create(&teacher_tid, NULL, teacher, NULL);

    for (int i = 0; i < 3; i++) {
        sem_post(&teacher_ready); // Start the teacher to provide resources
    }

    for (int i = 0; i < 3; i++) {
        pthread_join(students[i], NULL);
    }

    sem_destroy(&teacher_ready);
    for (int i = 0; i < 3; i++) {
        sem_destroy(&student_ready[i]);
    }

    return 0;
}

